// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2016 18:13:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    stopwatchtimes
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stopwatchtimes_vlg_sample_tst(
	clock_in,
	sampler_tx
);
input  clock_in;
output sampler_tx;

reg sample;
time current_time;
always @(clock_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module stopwatchtimes_vlg_check_tst (
	hundredms_output,
	onesecond_output,
	pin_name1,
	tenms_output,
	tenseconds_output,
	sampler_rx
);
input [6:0] hundredms_output;
input [6:0] onesecond_output;
input  pin_name1;
input [6:0] tenms_output;
input [6:0] tenseconds_output;
input sampler_rx;

reg [6:0] hundredms_output_expected;
reg [6:0] onesecond_output_expected;
reg  pin_name1_expected;
reg [6:0] tenms_output_expected;
reg [6:0] tenseconds_output_expected;

reg [6:0] hundredms_output_prev;
reg [6:0] onesecond_output_prev;
reg  pin_name1_prev;
reg [6:0] tenms_output_prev;
reg [6:0] tenseconds_output_prev;

reg [6:0] hundredms_output_expected_prev;
reg [6:0] onesecond_output_expected_prev;
reg  pin_name1_expected_prev;
reg [6:0] tenms_output_expected_prev;
reg [6:0] tenseconds_output_expected_prev;

reg [6:0] last_hundredms_output_exp;
reg [6:0] last_onesecond_output_exp;
reg  last_pin_name1_exp;
reg [6:0] last_tenms_output_exp;
reg [6:0] last_tenseconds_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	hundredms_output_prev = hundredms_output;
	onesecond_output_prev = onesecond_output;
	pin_name1_prev = pin_name1;
	tenms_output_prev = tenms_output;
	tenseconds_output_prev = tenseconds_output;
end

// update expected /o prevs

always @(trigger)
begin
	hundredms_output_expected_prev = hundredms_output_expected;
	onesecond_output_expected_prev = onesecond_output_expected;
	pin_name1_expected_prev = pin_name1_expected;
	tenms_output_expected_prev = tenms_output_expected;
	tenseconds_output_expected_prev = tenseconds_output_expected;
end


// expected hundredms_output[ 6 ]
initial
begin
	hundredms_output_expected[6] = 1'bX;
end 
// expected hundredms_output[ 5 ]
initial
begin
	hundredms_output_expected[5] = 1'bX;
end 
// expected hundredms_output[ 4 ]
initial
begin
	hundredms_output_expected[4] = 1'bX;
end 
// expected hundredms_output[ 3 ]
initial
begin
	hundredms_output_expected[3] = 1'bX;
end 
// expected hundredms_output[ 2 ]
initial
begin
	hundredms_output_expected[2] = 1'bX;
end 
// expected hundredms_output[ 1 ]
initial
begin
	hundredms_output_expected[1] = 1'bX;
end 
// expected hundredms_output[ 0 ]
initial
begin
	hundredms_output_expected[0] = 1'bX;
end 
// expected onesecond_output[ 6 ]
initial
begin
	onesecond_output_expected[6] = 1'bX;
end 
// expected onesecond_output[ 5 ]
initial
begin
	onesecond_output_expected[5] = 1'bX;
end 
// expected onesecond_output[ 4 ]
initial
begin
	onesecond_output_expected[4] = 1'bX;
end 
// expected onesecond_output[ 3 ]
initial
begin
	onesecond_output_expected[3] = 1'bX;
end 
// expected onesecond_output[ 2 ]
initial
begin
	onesecond_output_expected[2] = 1'bX;
end 
// expected onesecond_output[ 1 ]
initial
begin
	onesecond_output_expected[1] = 1'bX;
end 
// expected onesecond_output[ 0 ]
initial
begin
	onesecond_output_expected[0] = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 
// expected tenms_output[ 6 ]
initial
begin
	tenms_output_expected[6] = 1'bX;
end 
// expected tenms_output[ 5 ]
initial
begin
	tenms_output_expected[5] = 1'bX;
end 
// expected tenms_output[ 4 ]
initial
begin
	tenms_output_expected[4] = 1'bX;
end 
// expected tenms_output[ 3 ]
initial
begin
	tenms_output_expected[3] = 1'bX;
end 
// expected tenms_output[ 2 ]
initial
begin
	tenms_output_expected[2] = 1'bX;
end 
// expected tenms_output[ 1 ]
initial
begin
	tenms_output_expected[1] = 1'bX;
end 
// expected tenms_output[ 0 ]
initial
begin
	tenms_output_expected[0] = 1'bX;
end 
// expected tenseconds_output[ 6 ]
initial
begin
	tenseconds_output_expected[6] = 1'bX;
end 
// expected tenseconds_output[ 5 ]
initial
begin
	tenseconds_output_expected[5] = 1'bX;
end 
// expected tenseconds_output[ 4 ]
initial
begin
	tenseconds_output_expected[4] = 1'bX;
end 
// expected tenseconds_output[ 3 ]
initial
begin
	tenseconds_output_expected[3] = 1'bX;
end 
// expected tenseconds_output[ 2 ]
initial
begin
	tenseconds_output_expected[2] = 1'bX;
end 
// expected tenseconds_output[ 1 ]
initial
begin
	tenseconds_output_expected[1] = 1'bX;
end 
// expected tenseconds_output[ 0 ]
initial
begin
	tenseconds_output_expected[0] = 1'bX;
end 
// generate trigger
always @(hundredms_output_expected or hundredms_output or onesecond_output_expected or onesecond_output or pin_name1_expected or pin_name1 or tenms_output_expected or tenms_output or tenseconds_output_expected or tenseconds_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hundredms_output = %b | expected onesecond_output = %b | expected pin_name1 = %b | expected tenms_output = %b | expected tenseconds_output = %b | ",hundredms_output_expected_prev,onesecond_output_expected_prev,pin_name1_expected_prev,tenms_output_expected_prev,tenseconds_output_expected_prev);
	$display("| real hundredms_output = %b | real onesecond_output = %b | real pin_name1 = %b | real tenms_output = %b | real tenseconds_output = %b | ",hundredms_output_prev,onesecond_output_prev,pin_name1_prev,tenms_output_prev,tenseconds_output_prev);
`endif
	if (
		( hundredms_output_expected_prev[0] !== 1'bx ) && ( hundredms_output_prev[0] !== hundredms_output_expected_prev[0] )
		&& ((hundredms_output_expected_prev[0] !== last_hundredms_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[0] = hundredms_output_expected_prev[0];
	end
	if (
		( hundredms_output_expected_prev[1] !== 1'bx ) && ( hundredms_output_prev[1] !== hundredms_output_expected_prev[1] )
		&& ((hundredms_output_expected_prev[1] !== last_hundredms_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[1] = hundredms_output_expected_prev[1];
	end
	if (
		( hundredms_output_expected_prev[2] !== 1'bx ) && ( hundredms_output_prev[2] !== hundredms_output_expected_prev[2] )
		&& ((hundredms_output_expected_prev[2] !== last_hundredms_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[2] = hundredms_output_expected_prev[2];
	end
	if (
		( hundredms_output_expected_prev[3] !== 1'bx ) && ( hundredms_output_prev[3] !== hundredms_output_expected_prev[3] )
		&& ((hundredms_output_expected_prev[3] !== last_hundredms_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[3] = hundredms_output_expected_prev[3];
	end
	if (
		( hundredms_output_expected_prev[4] !== 1'bx ) && ( hundredms_output_prev[4] !== hundredms_output_expected_prev[4] )
		&& ((hundredms_output_expected_prev[4] !== last_hundredms_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[4] = hundredms_output_expected_prev[4];
	end
	if (
		( hundredms_output_expected_prev[5] !== 1'bx ) && ( hundredms_output_prev[5] !== hundredms_output_expected_prev[5] )
		&& ((hundredms_output_expected_prev[5] !== last_hundredms_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[5] = hundredms_output_expected_prev[5];
	end
	if (
		( hundredms_output_expected_prev[6] !== 1'bx ) && ( hundredms_output_prev[6] !== hundredms_output_expected_prev[6] )
		&& ((hundredms_output_expected_prev[6] !== last_hundredms_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hundredms_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hundredms_output_expected_prev);
		$display ("     Real value = %b", hundredms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_hundredms_output_exp[6] = hundredms_output_expected_prev[6];
	end
	if (
		( onesecond_output_expected_prev[0] !== 1'bx ) && ( onesecond_output_prev[0] !== onesecond_output_expected_prev[0] )
		&& ((onesecond_output_expected_prev[0] !== last_onesecond_output_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[0] = onesecond_output_expected_prev[0];
	end
	if (
		( onesecond_output_expected_prev[1] !== 1'bx ) && ( onesecond_output_prev[1] !== onesecond_output_expected_prev[1] )
		&& ((onesecond_output_expected_prev[1] !== last_onesecond_output_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[1] = onesecond_output_expected_prev[1];
	end
	if (
		( onesecond_output_expected_prev[2] !== 1'bx ) && ( onesecond_output_prev[2] !== onesecond_output_expected_prev[2] )
		&& ((onesecond_output_expected_prev[2] !== last_onesecond_output_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[2] = onesecond_output_expected_prev[2];
	end
	if (
		( onesecond_output_expected_prev[3] !== 1'bx ) && ( onesecond_output_prev[3] !== onesecond_output_expected_prev[3] )
		&& ((onesecond_output_expected_prev[3] !== last_onesecond_output_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[3] = onesecond_output_expected_prev[3];
	end
	if (
		( onesecond_output_expected_prev[4] !== 1'bx ) && ( onesecond_output_prev[4] !== onesecond_output_expected_prev[4] )
		&& ((onesecond_output_expected_prev[4] !== last_onesecond_output_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[4] = onesecond_output_expected_prev[4];
	end
	if (
		( onesecond_output_expected_prev[5] !== 1'bx ) && ( onesecond_output_prev[5] !== onesecond_output_expected_prev[5] )
		&& ((onesecond_output_expected_prev[5] !== last_onesecond_output_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[5] = onesecond_output_expected_prev[5];
	end
	if (
		( onesecond_output_expected_prev[6] !== 1'bx ) && ( onesecond_output_prev[6] !== onesecond_output_expected_prev[6] )
		&& ((onesecond_output_expected_prev[6] !== last_onesecond_output_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port onesecond_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", onesecond_output_expected_prev);
		$display ("     Real value = %b", onesecond_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_onesecond_output_exp[6] = onesecond_output_expected_prev[6];
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( tenms_output_expected_prev[0] !== 1'bx ) && ( tenms_output_prev[0] !== tenms_output_expected_prev[0] )
		&& ((tenms_output_expected_prev[0] !== last_tenms_output_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[0] = tenms_output_expected_prev[0];
	end
	if (
		( tenms_output_expected_prev[1] !== 1'bx ) && ( tenms_output_prev[1] !== tenms_output_expected_prev[1] )
		&& ((tenms_output_expected_prev[1] !== last_tenms_output_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[1] = tenms_output_expected_prev[1];
	end
	if (
		( tenms_output_expected_prev[2] !== 1'bx ) && ( tenms_output_prev[2] !== tenms_output_expected_prev[2] )
		&& ((tenms_output_expected_prev[2] !== last_tenms_output_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[2] = tenms_output_expected_prev[2];
	end
	if (
		( tenms_output_expected_prev[3] !== 1'bx ) && ( tenms_output_prev[3] !== tenms_output_expected_prev[3] )
		&& ((tenms_output_expected_prev[3] !== last_tenms_output_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[3] = tenms_output_expected_prev[3];
	end
	if (
		( tenms_output_expected_prev[4] !== 1'bx ) && ( tenms_output_prev[4] !== tenms_output_expected_prev[4] )
		&& ((tenms_output_expected_prev[4] !== last_tenms_output_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[4] = tenms_output_expected_prev[4];
	end
	if (
		( tenms_output_expected_prev[5] !== 1'bx ) && ( tenms_output_prev[5] !== tenms_output_expected_prev[5] )
		&& ((tenms_output_expected_prev[5] !== last_tenms_output_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[5] = tenms_output_expected_prev[5];
	end
	if (
		( tenms_output_expected_prev[6] !== 1'bx ) && ( tenms_output_prev[6] !== tenms_output_expected_prev[6] )
		&& ((tenms_output_expected_prev[6] !== last_tenms_output_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenms_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenms_output_expected_prev);
		$display ("     Real value = %b", tenms_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tenms_output_exp[6] = tenms_output_expected_prev[6];
	end
	if (
		( tenseconds_output_expected_prev[0] !== 1'bx ) && ( tenseconds_output_prev[0] !== tenseconds_output_expected_prev[0] )
		&& ((tenseconds_output_expected_prev[0] !== last_tenseconds_output_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[0] = tenseconds_output_expected_prev[0];
	end
	if (
		( tenseconds_output_expected_prev[1] !== 1'bx ) && ( tenseconds_output_prev[1] !== tenseconds_output_expected_prev[1] )
		&& ((tenseconds_output_expected_prev[1] !== last_tenseconds_output_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[1] = tenseconds_output_expected_prev[1];
	end
	if (
		( tenseconds_output_expected_prev[2] !== 1'bx ) && ( tenseconds_output_prev[2] !== tenseconds_output_expected_prev[2] )
		&& ((tenseconds_output_expected_prev[2] !== last_tenseconds_output_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[2] = tenseconds_output_expected_prev[2];
	end
	if (
		( tenseconds_output_expected_prev[3] !== 1'bx ) && ( tenseconds_output_prev[3] !== tenseconds_output_expected_prev[3] )
		&& ((tenseconds_output_expected_prev[3] !== last_tenseconds_output_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[3] = tenseconds_output_expected_prev[3];
	end
	if (
		( tenseconds_output_expected_prev[4] !== 1'bx ) && ( tenseconds_output_prev[4] !== tenseconds_output_expected_prev[4] )
		&& ((tenseconds_output_expected_prev[4] !== last_tenseconds_output_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[4] = tenseconds_output_expected_prev[4];
	end
	if (
		( tenseconds_output_expected_prev[5] !== 1'bx ) && ( tenseconds_output_prev[5] !== tenseconds_output_expected_prev[5] )
		&& ((tenseconds_output_expected_prev[5] !== last_tenseconds_output_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[5] = tenseconds_output_expected_prev[5];
	end
	if (
		( tenseconds_output_expected_prev[6] !== 1'bx ) && ( tenseconds_output_prev[6] !== tenseconds_output_expected_prev[6] )
		&& ((tenseconds_output_expected_prev[6] !== last_tenseconds_output_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenseconds_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenseconds_output_expected_prev);
		$display ("     Real value = %b", tenseconds_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tenseconds_output_exp[6] = tenseconds_output_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module stopwatchtimes_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_in;
// wires                                               
wire [6:0] hundredms_output;
wire [6:0] onesecond_output;
wire pin_name1;
wire [6:0] tenms_output;
wire [6:0] tenseconds_output;

wire sampler;                             

// assign statements (if any)                          
stopwatchtimes i1 (
// port map - connection between master ports and signals/registers   
	.clock_in(clock_in),
	.hundredms_output(hundredms_output),
	.onesecond_output(onesecond_output),
	.pin_name1(pin_name1),
	.tenms_output(tenms_output),
	.tenseconds_output(tenseconds_output)
);

// clock_in
initial
begin
	clock_in = 1'b0;
end 

stopwatchtimes_vlg_sample_tst tb_sample (
	.clock_in(clock_in),
	.sampler_tx(sampler)
);

stopwatchtimes_vlg_check_tst tb_out(
	.hundredms_output(hundredms_output),
	.onesecond_output(onesecond_output),
	.pin_name1(pin_name1),
	.tenms_output(tenms_output),
	.tenseconds_output(tenseconds_output),
	.sampler_rx(sampler)
);
endmodule

